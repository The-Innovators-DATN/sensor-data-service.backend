// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: stationpb/station.proto

package stationpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commonpb "sensor-data-service.backend/api/pb/commonpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StationService_ListStations_FullMethodName        = "/station.StationService/ListStations"
	StationService_CreateStation_FullMethodName       = "/station.StationService/CreateStation"
	StationService_GetStationsByTarget_FullMethodName = "/station.StationService/GetStationsByTarget"
	StationService_GetStation_FullMethodName          = "/station.StationService/GetStation"
	StationService_DisableStation_FullMethodName      = "/station.StationService/DisableStation"
	StationService_UploadStationData_FullMethodName   = "/station.StationService/UploadStationData"
	StationService_ListWaterBodies_FullMethodName     = "/station.StationService/ListWaterBodies"
	StationService_CreateWaterBody_FullMethodName     = "/station.StationService/CreateWaterBody"
	StationService_DeleteWaterBody_FullMethodName     = "/station.StationService/DeleteWaterBody"
	StationService_GetWaterBody_FullMethodName        = "/station.StationService/GetWaterBody"
	StationService_ListCatchments_FullMethodName      = "/station.StationService/ListCatchments"
	StationService_CreateCatchment_FullMethodName     = "/station.StationService/CreateCatchment"
	StationService_DeleteCatchment_FullMethodName     = "/station.StationService/DeleteCatchment"
	StationService_GetCatchment_FullMethodName        = "/station.StationService/GetCatchment"
	StationService_ListRiverBasins_FullMethodName     = "/station.StationService/ListRiverBasins"
	StationService_CreateRiverBasin_FullMethodName    = "/station.StationService/CreateRiverBasin"
	StationService_DeleteRiverBasin_FullMethodName    = "/station.StationService/DeleteRiverBasin"
	StationService_GetRiverBasin_FullMethodName       = "/station.StationService/GetRiverBasin"
	StationService_ListCountries_FullMethodName       = "/station.StationService/ListCountries"
	StationService_ListStationTypes_FullMethodName    = "/station.StationService/ListStationTypes"
	StationService_ListStatus_FullMethodName          = "/station.StationService/ListStatus"
)

// StationServiceClient is the client API for StationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StationServiceClient interface {
	// ===== STATION =====
	ListStations(ctx context.Context, in *StationQuery, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetStationsByTarget(ctx context.Context, in *TargetSelector, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DisableStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	UploadStationData(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	// ===== WATER BODY =====
	ListWaterBodies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateWaterBody(ctx context.Context, in *WaterBody, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DeleteWaterBody(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetWaterBody(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	// ===== CATCHMENT =====
	ListCatchments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateCatchment(ctx context.Context, in *Catchment, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DeleteCatchment(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetCatchment(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	// ===== RIVER BASIN =====
	ListRiverBasins(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateRiverBasin(ctx context.Context, in *RiverBasin, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DeleteRiverBasin(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetRiverBasin(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	// ===== ENUM TABLES =====
	ListCountries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	ListStationTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	ListStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
}

type stationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStationServiceClient(cc grpc.ClientConnInterface) StationServiceClient {
	return &stationServiceClient{cc}
}

func (c *stationServiceClient) ListStations(ctx context.Context, in *StationQuery, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CreateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_CreateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStationsByTarget(ctx context.Context, in *TargetSelector, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_GetStationsByTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_GetStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) DisableStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_DisableStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) UploadStationData(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_UploadStationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListWaterBodies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListWaterBodies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CreateWaterBody(ctx context.Context, in *WaterBody, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_CreateWaterBody_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) DeleteWaterBody(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_DeleteWaterBody_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetWaterBody(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_GetWaterBody_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListCatchments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListCatchments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CreateCatchment(ctx context.Context, in *Catchment, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_CreateCatchment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) DeleteCatchment(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_DeleteCatchment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetCatchment(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_GetCatchment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListRiverBasins(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListRiverBasins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CreateRiverBasin(ctx context.Context, in *RiverBasin, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_CreateRiverBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) DeleteRiverBasin(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_DeleteRiverBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetRiverBasin(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_GetRiverBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListCountries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListStationTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListStationTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) ListStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, StationService_ListStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StationServiceServer is the server API for StationService service.
// All implementations must embed UnimplementedStationServiceServer
// for forward compatibility.
type StationServiceServer interface {
	// ===== STATION =====
	ListStations(context.Context, *StationQuery) (*commonpb.StandardResponse, error)
	CreateStation(context.Context, *Station) (*commonpb.StandardResponse, error)
	GetStationsByTarget(context.Context, *TargetSelector) (*commonpb.StandardResponse, error)
	GetStation(context.Context, *StationID) (*commonpb.StandardResponse, error)
	DisableStation(context.Context, *StationID) (*commonpb.StandardResponse, error)
	UploadStationData(context.Context, *UploadRequest) (*commonpb.StandardResponse, error)
	// ===== WATER BODY =====
	ListWaterBodies(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	CreateWaterBody(context.Context, *WaterBody) (*commonpb.StandardResponse, error)
	DeleteWaterBody(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	GetWaterBody(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	// ===== CATCHMENT =====
	ListCatchments(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	CreateCatchment(context.Context, *Catchment) (*commonpb.StandardResponse, error)
	DeleteCatchment(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	GetCatchment(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	// ===== RIVER BASIN =====
	ListRiverBasins(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	CreateRiverBasin(context.Context, *RiverBasin) (*commonpb.StandardResponse, error)
	DeleteRiverBasin(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	GetRiverBasin(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error)
	// ===== ENUM TABLES =====
	ListCountries(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	ListStationTypes(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	ListStatus(context.Context, *empty.Empty) (*commonpb.StandardResponse, error)
	mustEmbedUnimplementedStationServiceServer()
}

// UnimplementedStationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStationServiceServer struct{}

func (UnimplementedStationServiceServer) ListStations(context.Context, *StationQuery) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStations not implemented")
}
func (UnimplementedStationServiceServer) CreateStation(context.Context, *Station) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedStationServiceServer) GetStationsByTarget(context.Context, *TargetSelector) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationsByTarget not implemented")
}
func (UnimplementedStationServiceServer) GetStation(context.Context, *StationID) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedStationServiceServer) DisableStation(context.Context, *StationID) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStation not implemented")
}
func (UnimplementedStationServiceServer) UploadStationData(context.Context, *UploadRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadStationData not implemented")
}
func (UnimplementedStationServiceServer) ListWaterBodies(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWaterBodies not implemented")
}
func (UnimplementedStationServiceServer) CreateWaterBody(context.Context, *WaterBody) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWaterBody not implemented")
}
func (UnimplementedStationServiceServer) DeleteWaterBody(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWaterBody not implemented")
}
func (UnimplementedStationServiceServer) GetWaterBody(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaterBody not implemented")
}
func (UnimplementedStationServiceServer) ListCatchments(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatchments not implemented")
}
func (UnimplementedStationServiceServer) CreateCatchment(context.Context, *Catchment) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatchment not implemented")
}
func (UnimplementedStationServiceServer) DeleteCatchment(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatchment not implemented")
}
func (UnimplementedStationServiceServer) GetCatchment(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatchment not implemented")
}
func (UnimplementedStationServiceServer) ListRiverBasins(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRiverBasins not implemented")
}
func (UnimplementedStationServiceServer) CreateRiverBasin(context.Context, *RiverBasin) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiverBasin not implemented")
}
func (UnimplementedStationServiceServer) DeleteRiverBasin(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRiverBasin not implemented")
}
func (UnimplementedStationServiceServer) GetRiverBasin(context.Context, *wrappers.Int32Value) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiverBasin not implemented")
}
func (UnimplementedStationServiceServer) ListCountries(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedStationServiceServer) ListStationTypes(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStationTypes not implemented")
}
func (UnimplementedStationServiceServer) ListStatus(context.Context, *empty.Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatus not implemented")
}
func (UnimplementedStationServiceServer) mustEmbedUnimplementedStationServiceServer() {}
func (UnimplementedStationServiceServer) testEmbeddedByValue()                        {}

// UnsafeStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StationServiceServer will
// result in compilation errors.
type UnsafeStationServiceServer interface {
	mustEmbedUnimplementedStationServiceServer()
}

func RegisterStationServiceServer(s grpc.ServiceRegistrar, srv StationServiceServer) {
	// If the following call pancis, it indicates UnimplementedStationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StationService_ServiceDesc, srv)
}

func _StationService_ListStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListStations(ctx, req.(*StationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_CreateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateStation(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStationsByTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStationsByTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetStationsByTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStationsByTarget(ctx, req.(*TargetSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStation(ctx, req.(*StationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_DisableStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).DisableStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_DisableStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).DisableStation(ctx, req.(*StationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_UploadStationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).UploadStationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_UploadStationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).UploadStationData(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListWaterBodies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListWaterBodies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListWaterBodies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListWaterBodies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CreateWaterBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateWaterBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_CreateWaterBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateWaterBody(ctx, req.(*WaterBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_DeleteWaterBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).DeleteWaterBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_DeleteWaterBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).DeleteWaterBody(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetWaterBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetWaterBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetWaterBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetWaterBody(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListCatchments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListCatchments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListCatchments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListCatchments(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CreateCatchment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catchment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateCatchment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_CreateCatchment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateCatchment(ctx, req.(*Catchment))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_DeleteCatchment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).DeleteCatchment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_DeleteCatchment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).DeleteCatchment(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetCatchment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetCatchment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetCatchment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetCatchment(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListRiverBasins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListRiverBasins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListRiverBasins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListRiverBasins(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CreateRiverBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiverBasin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateRiverBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_CreateRiverBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateRiverBasin(ctx, req.(*RiverBasin))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_DeleteRiverBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).DeleteRiverBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_DeleteRiverBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).DeleteRiverBasin(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetRiverBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetRiverBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetRiverBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetRiverBasin(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListCountries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListStationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListStationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListStationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListStationTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_ListStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).ListStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_ListStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).ListStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StationService_ServiceDesc is the grpc.ServiceDesc for StationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "station.StationService",
	HandlerType: (*StationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStations",
			Handler:    _StationService_ListStations_Handler,
		},
		{
			MethodName: "CreateStation",
			Handler:    _StationService_CreateStation_Handler,
		},
		{
			MethodName: "GetStationsByTarget",
			Handler:    _StationService_GetStationsByTarget_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _StationService_GetStation_Handler,
		},
		{
			MethodName: "DisableStation",
			Handler:    _StationService_DisableStation_Handler,
		},
		{
			MethodName: "UploadStationData",
			Handler:    _StationService_UploadStationData_Handler,
		},
		{
			MethodName: "ListWaterBodies",
			Handler:    _StationService_ListWaterBodies_Handler,
		},
		{
			MethodName: "CreateWaterBody",
			Handler:    _StationService_CreateWaterBody_Handler,
		},
		{
			MethodName: "DeleteWaterBody",
			Handler:    _StationService_DeleteWaterBody_Handler,
		},
		{
			MethodName: "GetWaterBody",
			Handler:    _StationService_GetWaterBody_Handler,
		},
		{
			MethodName: "ListCatchments",
			Handler:    _StationService_ListCatchments_Handler,
		},
		{
			MethodName: "CreateCatchment",
			Handler:    _StationService_CreateCatchment_Handler,
		},
		{
			MethodName: "DeleteCatchment",
			Handler:    _StationService_DeleteCatchment_Handler,
		},
		{
			MethodName: "GetCatchment",
			Handler:    _StationService_GetCatchment_Handler,
		},
		{
			MethodName: "ListRiverBasins",
			Handler:    _StationService_ListRiverBasins_Handler,
		},
		{
			MethodName: "CreateRiverBasin",
			Handler:    _StationService_CreateRiverBasin_Handler,
		},
		{
			MethodName: "DeleteRiverBasin",
			Handler:    _StationService_DeleteRiverBasin_Handler,
		},
		{
			MethodName: "GetRiverBasin",
			Handler:    _StationService_GetRiverBasin_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _StationService_ListCountries_Handler,
		},
		{
			MethodName: "ListStationTypes",
			Handler:    _StationService_ListStationTypes_Handler,
		},
		{
			MethodName: "ListStatus",
			Handler:    _StationService_ListStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stationpb/station.proto",
}
