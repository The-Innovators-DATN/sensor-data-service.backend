// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: parameterpb/parameter.proto

package parameterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commonpb "sensor-data-service.backend/api/pb/commonpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParameterService_ListParameters_FullMethodName  = "/parameter.ParameterService/ListParameters"
	ParameterService_GetParameter_FullMethodName    = "/parameter.ParameterService/GetParameter"
	ParameterService_CreateParameter_FullMethodName = "/parameter.ParameterService/CreateParameter"
	ParameterService_UpdateParameter_FullMethodName = "/parameter.ParameterService/UpdateParameter"
	ParameterService_DeleteParameter_FullMethodName = "/parameter.ParameterService/DeleteParameter"
)

// ParameterServiceClient is the client API for ParameterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParameterServiceClient interface {
	ListParameters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	GetParameter(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateParameter(ctx context.Context, in *ParameterCreateRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	UpdateParameter(ctx context.Context, in *ParameterUpdateRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DeleteParameter(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
}

type parameterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParameterServiceClient(cc grpc.ClientConnInterface) ParameterServiceClient {
	return &parameterServiceClient{cc}
}

func (c *parameterServiceClient) ListParameters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, ParameterService_ListParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterServiceClient) GetParameter(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, ParameterService_GetParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterServiceClient) CreateParameter(ctx context.Context, in *ParameterCreateRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, ParameterService_CreateParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterServiceClient) UpdateParameter(ctx context.Context, in *ParameterUpdateRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, ParameterService_UpdateParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterServiceClient) DeleteParameter(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, ParameterService_DeleteParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParameterServiceServer is the server API for ParameterService service.
// All implementations must embed UnimplementedParameterServiceServer
// for forward compatibility.
type ParameterServiceServer interface {
	ListParameters(context.Context, *Empty) (*commonpb.StandardResponse, error)
	GetParameter(context.Context, *ParameterRequest) (*commonpb.StandardResponse, error)
	CreateParameter(context.Context, *ParameterCreateRequest) (*commonpb.StandardResponse, error)
	UpdateParameter(context.Context, *ParameterUpdateRequest) (*commonpb.StandardResponse, error)
	DeleteParameter(context.Context, *ParameterRequest) (*commonpb.StandardResponse, error)
	mustEmbedUnimplementedParameterServiceServer()
}

// UnimplementedParameterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParameterServiceServer struct{}

func (UnimplementedParameterServiceServer) ListParameters(context.Context, *Empty) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParameters not implemented")
}
func (UnimplementedParameterServiceServer) GetParameter(context.Context, *ParameterRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameter not implemented")
}
func (UnimplementedParameterServiceServer) CreateParameter(context.Context, *ParameterCreateRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParameter not implemented")
}
func (UnimplementedParameterServiceServer) UpdateParameter(context.Context, *ParameterUpdateRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameter not implemented")
}
func (UnimplementedParameterServiceServer) DeleteParameter(context.Context, *ParameterRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParameter not implemented")
}
func (UnimplementedParameterServiceServer) mustEmbedUnimplementedParameterServiceServer() {}
func (UnimplementedParameterServiceServer) testEmbeddedByValue()                          {}

// UnsafeParameterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParameterServiceServer will
// result in compilation errors.
type UnsafeParameterServiceServer interface {
	mustEmbedUnimplementedParameterServiceServer()
}

func RegisterParameterServiceServer(s grpc.ServiceRegistrar, srv ParameterServiceServer) {
	// If the following call pancis, it indicates UnimplementedParameterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParameterService_ServiceDesc, srv)
}

func _ParameterService_ListParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterServiceServer).ListParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterService_ListParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterServiceServer).ListParameters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterService_GetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterServiceServer).GetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterService_GetParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterServiceServer).GetParameter(ctx, req.(*ParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterService_CreateParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterServiceServer).CreateParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterService_CreateParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterServiceServer).CreateParameter(ctx, req.(*ParameterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterService_UpdateParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterServiceServer).UpdateParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterService_UpdateParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterServiceServer).UpdateParameter(ctx, req.(*ParameterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterService_DeleteParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterServiceServer).DeleteParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterService_DeleteParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterServiceServer).DeleteParameter(ctx, req.(*ParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParameterService_ServiceDesc is the grpc.ServiceDesc for ParameterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParameterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parameter.ParameterService",
	HandlerType: (*ParameterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListParameters",
			Handler:    _ParameterService_ListParameters_Handler,
		},
		{
			MethodName: "GetParameter",
			Handler:    _ParameterService_GetParameter_Handler,
		},
		{
			MethodName: "CreateParameter",
			Handler:    _ParameterService_CreateParameter_Handler,
		},
		{
			MethodName: "UpdateParameter",
			Handler:    _ParameterService_UpdateParameter_Handler,
		},
		{
			MethodName: "DeleteParameter",
			Handler:    _ParameterService_DeleteParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parameterpb/parameter.proto",
}
