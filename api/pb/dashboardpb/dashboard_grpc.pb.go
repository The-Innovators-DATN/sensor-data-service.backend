// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dashboardpb/dashboard.proto

package dashboardpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commonpb "sensor-data-service.backend/api/pb/commonpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DashboardService_GetDashboard_FullMethodName    = "/dashboard.DashboardService/GetDashboard"
	DashboardService_ListDashboards_FullMethodName  = "/dashboard.DashboardService/ListDashboards"
	DashboardService_CreateDashboard_FullMethodName = "/dashboard.DashboardService/CreateDashboard"
	DashboardService_UpdateDashboard_FullMethodName = "/dashboard.DashboardService/UpdateDashboard"
	DashboardService_PatchDashboard_FullMethodName  = "/dashboard.DashboardService/PatchDashboard"
	DashboardService_DeleteDashboard_FullMethodName = "/dashboard.DashboardService/DeleteDashboard"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	ListDashboards(ctx context.Context, in *CreatedBy, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	PatchDashboard(ctx context.Context, in *PatchDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ListDashboards(ctx context.Context, in *CreatedBy, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_ListDashboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_CreateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_UpdateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) PatchDashboard(ctx context.Context, in *PatchDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_PatchDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*commonpb.StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.StandardResponse)
	err := c.cc.Invoke(ctx, DashboardService_DeleteDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility.
type DashboardServiceServer interface {
	GetDashboard(context.Context, *GetDashboardRequest) (*commonpb.StandardResponse, error)
	ListDashboards(context.Context, *CreatedBy) (*commonpb.StandardResponse, error)
	CreateDashboard(context.Context, *CreateDashboardRequest) (*commonpb.StandardResponse, error)
	UpdateDashboard(context.Context, *UpdateDashboardRequest) (*commonpb.StandardResponse, error)
	PatchDashboard(context.Context, *PatchDashboardRequest) (*commonpb.StandardResponse, error)
	DeleteDashboard(context.Context, *DeleteDashboardRequest) (*commonpb.StandardResponse, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServiceServer struct{}

func (UnimplementedDashboardServiceServer) GetDashboard(context.Context, *GetDashboardRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) ListDashboards(context.Context, *CreatedBy) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboards not implemented")
}
func (UnimplementedDashboardServiceServer) CreateDashboard(context.Context, *CreateDashboardRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) UpdateDashboard(context.Context, *UpdateDashboardRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) PatchDashboard(context.Context, *PatchDashboardRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) DeleteDashboard(context.Context, *DeleteDashboardRequest) (*commonpb.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}
func (UnimplementedDashboardServiceServer) testEmbeddedByValue()                          {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ListDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedBy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ListDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_ListDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ListDashboards(ctx, req.(*CreatedBy))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_CreateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreateDashboard(ctx, req.(*CreateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_UpdateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).UpdateDashboard(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_PatchDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).PatchDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_PatchDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).PatchDashboard(ctx, req.(*PatchDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_DeleteDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).DeleteDashboard(ctx, req.(*DeleteDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDashboard",
			Handler:    _DashboardService_GetDashboard_Handler,
		},
		{
			MethodName: "ListDashboards",
			Handler:    _DashboardService_ListDashboards_Handler,
		},
		{
			MethodName: "CreateDashboard",
			Handler:    _DashboardService_CreateDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _DashboardService_UpdateDashboard_Handler,
		},
		{
			MethodName: "PatchDashboard",
			Handler:    _DashboardService_PatchDashboard_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _DashboardService_DeleteDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboardpb/dashboard.proto",
}
